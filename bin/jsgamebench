#! /usr/bin/env node

// Copyright 2004-present Facebook. All Rights Reserved.

// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

sys = require('sys');
fs = require('fs');
path = require('path');
events = require('events');
http = require('http');
crypto = require('crypto');
url = require('url');
querystring = require('querystring');
net = require('net');
io = require('socket.io');

Log = require('../lib/log');
LogProc = require('../lib/logproc');

Utils = require('../public/utils/utils');
Users = require('../lib/users');
Server = require('../lib/server');
Comm = require('../lib/comm');
Grid = require('../public/shared/grid');
GridSvr = require('../public/shared/gridsvr');
Vec = require('../public/utils/vec');
Mathx = require('../public/utils/math');
Socket = require('../lib/socket');
Cmds = SvrCmds = require('../lib/svrcmds');
SvrGame = require('../public/apps/space/svrgame');

sys.puts("starting server");
var production_mode = false;
var listenPort = 8081;

SvrGame.init();
for(var i=0;i<process.argv.length;i++) {
  if (process.argv[i] == '-80') {
    production_mode = true;
    listenPort = 80;
  } else if (process.argv[i] === '--port' && i+1 < process.argv.length) {
    i++;
    listenPort = process.argv[i];
  }
}

sys.puts("reading log file");
LogProc.start('logs/stats.log',null);

if (production_mode) {
  if (0) { // one glorious day nodejs will stop rewriting ssl
    var privateKey = '' + fs.readFileSync('cert/privatekey.pem');
    var certificate = '' + fs.readFileSync('cert/certificate.pem');
    var credentials = crypto.createCredentials({key: privateKey, cert: certificate});
    Server.init(Server.serverCallback,443,credentials);
  }
}
Server.init(Server.serverCallback,listenPort,0);

